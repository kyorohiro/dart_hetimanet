part of delphiniumapp;

class SwfPlayerBuffer {
  static const String playerswf = "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";
  static const String swfobject = "";
  
  static hetima.HetimaData createPlayerswf() {
    List<int> buffer = crypt.CryptoUtils.base64StringToBytes(playerswf);
    hetima.ArrayBuilder builder = new hetima.ArrayBuilder.fromList(buffer);
    return new hetima.HetimaBuilderToFile(builder);
  }


  static String previewFlvHtml(String path) {
    return 
"""<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en"><body>"""+
"""<object type="application/x-shockwave-flash" data="hetima.system.player.swf" width="100%" height="100%">"""+
"""<param name="FlashVars" value="flvaddr=${path}" />"""+
"""<param name="quality" value="high"/><param name="bgcolor" value="#ffffff"/>"""+
"""<param name="allowScriptAccess" value="sameDomain" /><param name="allowFullScreen" value="true" /></object></object></body></html>""";
  }
}
